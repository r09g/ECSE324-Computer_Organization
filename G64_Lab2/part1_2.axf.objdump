
C:/Users/Raymond Yang/Desktop/ARM/part1_2.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
// This program finds the minimum element in a list of numbers
			.text
			.global _start

_start:
			LDR R3, =RESULT				// R3 points to the memory location of RESULT
   0:	e59f304c 	ldr	r3, [pc, #76]	; 54 <NUMBERS+0x18>
			LDR R2, [R3, #4]!			// R2 holds the number of entries in the list, writeback is used, R4 is increment by 1 word
   4:	e5b32004 	ldr	r2, [r3, #4]!
			LDR R0, [R3, #4]!			// R0 holds the first number in the list, writeback is used, R4 is increment by 1 word
   8:	e5b30004 	ldr	r0, [r3, #4]!
			BL 	SUBROUTINE				// call subroutine, link register stores address of next instruction
   c:	eb000000 	bl	14 <SUBROUTINE>
			B	END						// program ends
  10:	ea000006 	b	30 <END>

00000014 <SUBROUTINE>:

SUBROUTINE: 
			SUBS R2, R2, #1				// decrement entries counter and update conditional code flags
  14:	e2522001 	subs	r2, r2, #1
			BXEQ LR						// go back to calling instruction when R2 = 0
  18:	012fff1e 	bxeq	lr
			LDR R1, [R3, #4]!			// load next number from memory and increment the pointer R3
  1c:	e5b31004 	ldr	r1, [r3, #4]!
			CMP R0, R1					// compare current and previous number (R1 is the new number and R0 is the current minimum)
  20:	e1500001 	cmp	r0, r1
			BLE SUBROUTINE				// if old value still greater, go back to SUBROUTINE (don't record it as the new minimum)
  24:	dafffffa 	ble	14 <SUBROUTINE>
			MOV R0, R1					// if new value in R1 is greater, move value from R1 to R0 (there is a new minimum)
  28:	e1a00001 	mov	r0, r1
			B SUBROUTINE				// branch back to SUBROUTINE
  2c:	eafffff8 	b	14 <SUBROUTINE>

00000030 <END>:

END: 		B END						// infinite loop!
  30:	eafffffe 	b	30 <END>

00000034 <RESULT>:
  34:	00000000 	.word	0x00000000

00000038 <N>:
  38:	00000006 	.word	0x00000006

0000003c <NUMBERS>:
  3c:	00000004 	.word	0x00000004
  40:	00000005 	.word	0x00000005
  44:	00000003 	.word	0x00000003
  48:	0000000a 	.word	0x0000000a
  4c:	ffffffff 	.word	0xffffffff
  50:	00000005 	.word	0x00000005
  54:	00000034 	.word	0x00000034
