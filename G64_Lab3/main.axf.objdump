
C:/Users/Raymond Yang/Desktop/G64_Lab3/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 d4 0b 00 00 d8 0b 00 00 dc 0b 00 00     @...............
  30:	e0 0b 00 00 d0 0b 00 00 e4 0b 00 00 e8 0b 00 00     ................

Disassembly of section .text:

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <EIGHT+0x59>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <EIGHT+0x55>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <EIGHT+0x5d>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <EIGHT+0x25>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <EIGHT+0x25>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <EIGHT+0xd>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <EIGHT+0x45>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <EIGHT+0x35>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <D+0x6>
  d4:	eb0002a4 	bl	b6c <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000cd0 	.word	0x00000cd0

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00001108 	.word	0x00001108

00000124 <__cs3_heap_start_ptr>:
 124:	00001130 	.word	0x00001130

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00001110 	.word	0x00001110
 170:	00001113 	.word	0x00001113
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00001110 	.word	0x00001110
 1bc:	00001110 	.word	0x00001110
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00001110 	.word	0x00001110
 200:	00000000 	.word	0x00000000
 204:	00000c74 	.word	0x00000c74

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000c74 	.word	0x00000c74
 250:	00001114 	.word	0x00001114
 254:	00000cd0 	.word	0x00000cd0
 258:	00000000 	.word	0x00000000

0000025c <main>:
	return 0;
}

*/

int main() {
 25c:	e92d4800 	push	{r11, lr}
 260:	e28db004 	add	r11, sp, #4
 264:	e24dd030 	sub	sp, sp, #48	; 0x30
	int count0 = 0, count1 = 0, count2 = 0, count3 = 0, count4 = 0, count5 = 0;
 268:	e3a03000 	mov	r3, #0
 26c:	e50b3008 	str	r3, [r11, #-8]
 270:	e3a03000 	mov	r3, #0
 274:	e50b300c 	str	r3, [r11, #-12]
 278:	e3a03000 	mov	r3, #0
 27c:	e50b3010 	str	r3, [r11, #-16]
 280:	e3a03000 	mov	r3, #0
 284:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
 288:	e3a03000 	mov	r3, #0
 28c:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
 290:	e3a03000 	mov	r3, #0
 294:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	
	HPS_TIM_config_t hps_tim;

	hps_tim.tim = TIM0;
 298:	e3a03001 	mov	r3, #1
 29c:	e54b3030 	strb	r3, [r11, #-48]	; 0xffffffd0
	hps_tim.timeout = 1000000; // 0.01 sec  = 10 millisec
 2a0:	e3043240 	movw	r3, #16960	; 0x4240
 2a4:	e340300f 	movt	r3, #15
 2a8:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
	hps_tim.LD_en = 1;
 2ac:	e3a03001 	mov	r3, #1
 2b0:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
	hps_tim.INT_en = 1;
 2b4:	e3a03001 	mov	r3, #1
 2b8:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
	hps_tim.enable = 1;
 2bc:	e3a03001 	mov	r3, #1
 2c0:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0

	HPS_TIM_config_ASM(&hps_tim);
 2c4:	e24b3030 	sub	r3, r11, #48	; 0x30
 2c8:	e1a00003 	mov	r0, r3
 2cc:	eb0000ff 	bl	6d0 <HPS_TIM_config_ASM>
 2d0:	ea000000 	b	2d8 <main+0x7c>
			HEX_write_ASM(HEX2, count2);
			HEX_write_ASM(HEX3, count3);
			HEX_write_ASM(HEX4, count4);
			HEX_write_ASM(HEX5, count5);
		}
	}
 2d4:	e1a00000 	nop			; (mov r0, r0)
	hps_tim.enable = 1;

	HPS_TIM_config_ASM(&hps_tim);

	while(1) {
		if(HPS_TIM_read_INT_ASM(TIM0)){
 2d8:	e3a00001 	mov	r0, #1
 2dc:	eb000128 	bl	784 <HPS_TIM_read_INT_ASM>
 2e0:	e1a03000 	mov	r3, r0
 2e4:	e3530000 	cmp	r3, #0
 2e8:	0afffff9 	beq	2d4 <main+0x78>
			HPS_TIM_clear_INT_ASM(TIM0);
 2ec:	e3a00001 	mov	r0, #1
 2f0:	eb000130 	bl	7b8 <HPS_TIM_clear_INT_ASM>
			
			if(++count0 == 10) {
 2f4:	e51b3008 	ldr	r3, [r11, #-8]
 2f8:	e2833001 	add	r3, r3, #1
 2fc:	e50b3008 	str	r3, [r11, #-8]
 300:	e51b3008 	ldr	r3, [r11, #-8]
 304:	e353000a 	cmp	r3, #10
 308:	1a000029 	bne	3b4 <main+0x158>
				count0 = 0;
 30c:	e3a03000 	mov	r3, #0
 310:	e50b3008 	str	r3, [r11, #-8]
				if (++count1 == 10){
 314:	e51b300c 	ldr	r3, [r11, #-12]
 318:	e2833001 	add	r3, r3, #1
 31c:	e50b300c 	str	r3, [r11, #-12]
 320:	e51b300c 	ldr	r3, [r11, #-12]
 324:	e353000a 	cmp	r3, #10
 328:	1a000021 	bne	3b4 <main+0x158>
					count1 = 0;
 32c:	e3a03000 	mov	r3, #0
 330:	e50b300c 	str	r3, [r11, #-12]
					if (++count2 == 10){
 334:	e51b3010 	ldr	r3, [r11, #-16]
 338:	e2833001 	add	r3, r3, #1
 33c:	e50b3010 	str	r3, [r11, #-16]
 340:	e51b3010 	ldr	r3, [r11, #-16]
 344:	e353000a 	cmp	r3, #10
 348:	1a000019 	bne	3b4 <main+0x158>
						count2 = 0;
 34c:	e3a03000 	mov	r3, #0
 350:	e50b3010 	str	r3, [r11, #-16]
						if (++count3 == 6){
 354:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 358:	e2833001 	add	r3, r3, #1
 35c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
 360:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 364:	e3530006 	cmp	r3, #6
 368:	1a000011 	bne	3b4 <main+0x158>
							count3 = 0;
 36c:	e3a03000 	mov	r3, #0
 370:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
							if (++count4 == 10){
 374:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 378:	e2833001 	add	r3, r3, #1
 37c:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
 380:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 384:	e353000a 	cmp	r3, #10
 388:	1a000009 	bne	3b4 <main+0x158>
								count4 = 0;
 38c:	e3a03000 	mov	r3, #0
 390:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
								if (++count5 == 6){
 394:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
 398:	e2833001 	add	r3, r3, #1
 39c:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
 3a0:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
 3a4:	e3530006 	cmp	r3, #6
 3a8:	1a000001 	bne	3b4 <main+0x158>
									count5 = 0;
 3ac:	e3a03000 	mov	r3, #0
 3b0:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
						}
					}
				}

			}
			HEX_write_ASM(HEX0, count0);
 3b4:	e51b3008 	ldr	r3, [r11, #-8]
 3b8:	e6ef3073 	uxtb	r3, r3
 3bc:	e3a00001 	mov	r0, #1
 3c0:	e1a01003 	mov	r1, r3
 3c4:	eb00004d 	bl	500 <HEX_write_ASM>
			HEX_write_ASM(HEX1, count1);
 3c8:	e51b300c 	ldr	r3, [r11, #-12]
 3cc:	e6ef3073 	uxtb	r3, r3
 3d0:	e3a00002 	mov	r0, #2
 3d4:	e1a01003 	mov	r1, r3
 3d8:	eb000048 	bl	500 <HEX_write_ASM>
			HEX_write_ASM(HEX2, count2);
 3dc:	e51b3010 	ldr	r3, [r11, #-16]
 3e0:	e6ef3073 	uxtb	r3, r3
 3e4:	e3a00004 	mov	r0, #4
 3e8:	e1a01003 	mov	r1, r3
 3ec:	eb000043 	bl	500 <HEX_write_ASM>
			HEX_write_ASM(HEX3, count3);
 3f0:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 3f4:	e6ef3073 	uxtb	r3, r3
 3f8:	e3a00008 	mov	r0, #8
 3fc:	e1a01003 	mov	r1, r3
 400:	eb00003e 	bl	500 <HEX_write_ASM>
			HEX_write_ASM(HEX4, count4);
 404:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 408:	e6ef3073 	uxtb	r3, r3
 40c:	e3a00010 	mov	r0, #16
 410:	e1a01003 	mov	r1, r3
 414:	eb000039 	bl	500 <HEX_write_ASM>
			HEX_write_ASM(HEX5, count5);
 418:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
 41c:	e6ef3073 	uxtb	r3, r3
 420:	e3a00020 	mov	r0, #32
 424:	e1a01003 	mov	r1, r3
 428:	eb000034 	bl	500 <HEX_write_ASM>
		}
	}
 42c:	eaffffa8 	b	2d4 <main+0x78>

00000430 <read_LEDs_ASM>:
	.equ LEDs, 0xFF200000
	.global read_LEDs_ASM
	.global write_LEDs_ASM

read_LEDs_ASM:
	LDR R1, =LEDs
 430:	e59f1014 	ldr	r1, [pc, #20]	; 44c <DONE>
	LDR R0, [R1]
 434:	e5910000 	ldr	r0, [r1]
	BX LR
 438:	e12fff1e 	bx	lr

	B DONE
 43c:	ea000002 	b	44c <DONE>

00000440 <write_LEDs_ASM>:

write_LEDs_ASM:
	LDR R1, =LEDs
 440:	e59f1004 	ldr	r1, [pc, #4]	; 44c <DONE>
	STR R0, [R1]
 444:	e5810000 	str	r0, [r1]
	BX LR
 448:	e12fff1e 	bx	lr

0000044c <DONE>:
	.equ LEDs, 0xFF200000
	.global read_LEDs_ASM
	.global write_LEDs_ASM

read_LEDs_ASM:
	LDR R1, =LEDs
 44c:	ff200000 	.word	0xff200000

00000450 <read_slider_switches_ASM>:
	.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	LDR R1, =SW_BASE
 450:	e59f1004 	ldr	r1, [pc, #4]	; 45c <read_slider_switches_ASM+0xc>
	LDR R0, [R1]
 454:	e5910000 	ldr	r0, [r1]
	BX LR
 458:	e12fff1e 	bx	lr
	.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	LDR R1, =SW_BASE
 45c:	ff200040 	.word	0xff200040

00000460 <HEX_flood_ASM>:
	.global HEX_clear_ASM
	.global HEX_flood_ASM
	.global HEX_write_ASM

HEX_flood_ASM: 
	LDR R1, =ADDR1
 460:	e59f11a0 	ldr	r1, [pc, #416]	; 608 <DONE+0x4>
	LDR R3, [R1]	// use if we want to keep current led display. current status of LED display 1s
 464:	e5913000 	ldr	r3, [r1]
//	MOV R3, #0	// use this if we want to clear the displays every time the subroutine is ran
	MOV R2, #0b01111111
 468:	e3a0207f 	mov	r2, #127	; 0x7f
	TST R0, #1
 46c:	e3100001 	tst	r0, #1
	ORRNE R3, R3, R2
 470:	11833002 	orrne	r3, r3, r2
	TST R0, #2
 474:	e3100002 	tst	r0, #2
	ORRNE R3, R3, R2, LSL #8
 478:	11833402 	orrne	r3, r3, r2, lsl #8
	TST R0, #4
 47c:	e3100004 	tst	r0, #4
	ORRNE R3, R3, R2, LSL #16
 480:	11833802 	orrne	r3, r3, r2, lsl #16
	TST R0, #8
 484:	e3100008 	tst	r0, #8
	ORRNE R3, R3, R2, LSL #24
 488:	11833c02 	orrne	r3, r3, r2, lsl #24
	STR R3, [R1]	
 48c:	e5813000 	str	r3, [r1]

	LDR R1, =ADDR2
 490:	e59f1174 	ldr	r1, [pc, #372]	; 60c <DONE+0x8>
	LDR R3, [R1]	// current status of LED display 2
 494:	e5913000 	ldr	r3, [r1]
//	MOV R3, #0
	TST R0, #16
 498:	e3100010 	tst	r0, #16
	ORRNE R3, R3, R2
 49c:	11833002 	orrne	r3, r3, r2
	TST R0, #32
 4a0:	e3100020 	tst	r0, #32
	ORRNE R3, R3, R2, LSL #8
 4a4:	11833402 	orrne	r3, r3, r2, lsl #8
	STR R3, [R1]
 4a8:	e5813000 	str	r3, [r1]

	B DONE
 4ac:	ea000054 	b	604 <DONE>

000004b0 <HEX_clear_ASM>:

HEX_clear_ASM:
	LDR R1, =ADDR1
 4b0:	e59f1150 	ldr	r1, [pc, #336]	; 608 <DONE+0x4>
	MOV R2, #0	// one copy of the 00000000 for a single LED display
 4b4:	e3a02000 	mov	r2, #0
	LDR R3, [R1]	// use if we want to keep current led display. Current status of LED display 1
 4b8:	e5913000 	ldr	r3, [r1]
//	MOV R3, #0	// use if we want to clear everything first when the subroutine is ran. Store the final 32 bit instruction to be sent to display
	TST R0, #1
 4bc:	e3100001 	tst	r0, #1
	ORRNE R3, R3, R2
 4c0:	11833002 	orrne	r3, r3, r2
	TEQ R0, #2
 4c4:	e3300002 	teq	r0, #2
	ORRNE R3, R3, R2, LSL #8
 4c8:	11833402 	orrne	r3, r3, r2, lsl #8
	TEQ R0, #4
 4cc:	e3300004 	teq	r0, #4
	ORRNE R3, R3, R2, LSL #16
 4d0:	11833802 	orrne	r3, r3, r2, lsl #16
	TST R0, #8
 4d4:	e3100008 	tst	r0, #8
	ORRNE R3, R3, R2, LSL #24
 4d8:	11833c02 	orrne	r3, r3, r2, lsl #24
	STR R3, [R1]	
 4dc:	e5813000 	str	r3, [r1]

	LDR R1, =ADDR2
 4e0:	e59f1124 	ldr	r1, [pc, #292]	; 60c <DONE+0x8>
	LDR R3, [R1]	// load current LED display 2
 4e4:	e5913000 	ldr	r3, [r1]
//	MOV R3, #0	// build instruction from 0
	TST R0, #16
 4e8:	e3100010 	tst	r0, #16
	ORRNE R3, R3, R2
 4ec:	11833002 	orrne	r3, r3, r2
	TST R0, #32
 4f0:	e3100020 	tst	r0, #32
	ORRNE R3, R3, R2, LSL #8
 4f4:	11833402 	orrne	r3, r3, r2, lsl #8
	STR R3, [R1]	
 4f8:	e5813000 	str	r3, [r1]

	B DONE
 4fc:	ea000040 	b	604 <DONE>

00000500 <HEX_write_ASM>:

HEX_write_ASM:
	// store the "val" parameter in R2
	TEQ R1, #0
 500:	e3310000 	teq	r1, #0
	LDREQ R2, =ZERO
 504:	03a0203f 	moveq	r2, #63	; 0x3f
	TEQ R1, #1
 508:	e3310001 	teq	r1, #1
	LDREQ R2, =ONE	
 50c:	03a02006 	moveq	r2, #6
	TEQ R1, #2
 510:	e3310002 	teq	r1, #2
	LDREQ R2, =TWO
 514:	03a0205b 	moveq	r2, #91	; 0x5b
	TEQ R1, #3
 518:	e3310003 	teq	r1, #3
	LDREQ R2, =THREE
 51c:	03a0204f 	moveq	r2, #79	; 0x4f
	TEQ R1, #4
 520:	e3310004 	teq	r1, #4
	LDREQ R2, =FOUR
 524:	03a02066 	moveq	r2, #102	; 0x66
	TEQ R1, #5
 528:	e3310005 	teq	r1, #5
	LDREQ R2, =FIVE	
 52c:	03a0206d 	moveq	r2, #109	; 0x6d
	TEQ R1, #6
 530:	e3310006 	teq	r1, #6
	LDREQ R2, =SIX	
 534:	03a0207d 	moveq	r2, #125	; 0x7d
	TEQ R1, #7
 538:	e3310007 	teq	r1, #7
	LDREQ R2, =SEVEN	
 53c:	03a02046 	moveq	r2, #70	; 0x46
	TEQ R1, #8
 540:	e3310008 	teq	r1, #8
	LDREQ R2, =EIGHT	
 544:	03a0207f 	moveq	r2, #127	; 0x7f
	TEQ R1, #9
 548:	e3310009 	teq	r1, #9
	LDREQ R2, =NINE	
 54c:	03a0206f 	moveq	r2, #111	; 0x6f
	TEQ R1, #10
 550:	e331000a 	teq	r1, #10
	LDREQ R2, =A	
 554:	03a02077 	moveq	r2, #119	; 0x77
	TEQ R1, #11
 558:	e331000b 	teq	r1, #11
	LDREQ R2, =ELEVEN	
 55c:	03a0203d 	moveq	r2, #61	; 0x3d
	TEQ R1, #12
 560:	e331000c 	teq	r1, #12
	LDREQ R2, =C	
 564:	03a02039 	moveq	r2, #57	; 0x39
	TEQ R1, #13
 568:	e331000d 	teq	r1, #13
	LDREQ R2, =D	
 56c:	03a0205e 	moveq	r2, #94	; 0x5e
	TEQ R1, #14
 570:	e331000e 	teq	r1, #14
	LDREQ R2, =E
 574:	03a02079 	moveq	r2, #121	; 0x79
	TEQ R1, #15
 578:	e331000f 	teq	r1, #15
	LDREQ R2, =F
 57c:	03a02071 	moveq	r2, #113	; 0x71
	
	PUSH {R4}	// convention
 580:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	LDR R1, =ADDR1
 584:	e59f107c 	ldr	r1, [pc, #124]	; 608 <DONE+0x4>
	LDR R3, [R1]
 588:	e5913000 	ldr	r3, [r1]
//	MOV R3, #0
	TST R0, #1
 58c:	e3100001 	tst	r0, #1
	MOVNE R4, #0xFFFFFF00
 590:	13e040ff 	mvnne	r4, #255	; 0xff
	ANDNE R3, R3, R4	// clear target display 	
 594:	10033004 	andne	r3, r3, r4
	ORRNE R3, R3, R2	// update corresponding 8-bit location in instruction with new number
 598:	11833002 	orrne	r3, r3, r2
	TST R0, #2
 59c:	e3100002 	tst	r0, #2
	MOVNE R4, #0xFFFF00FF
 5a0:	13e04cff 	mvnne	r4, #65280	; 0xff00
	ANDNE R3, R3, R4	// clear target display 	
 5a4:	10033004 	andne	r3, r3, r4
	ORRNE R3, R3, R2, LSL #8	
 5a8:	11833402 	orrne	r3, r3, r2, lsl #8
	TST R0, #4
 5ac:	e3100004 	tst	r0, #4
	MOVNE R4, #0xFF00FFFF
 5b0:	13e048ff 	mvnne	r4, #16711680	; 0xff0000
	ANDNE R3, R3, R4
 5b4:	10033004 	andne	r3, r3, r4
	ORRNE R3, R3, R2, LSL #16
 5b8:	11833802 	orrne	r3, r3, r2, lsl #16
	TST R0, #8
 5bc:	e3100008 	tst	r0, #8
	MOVNE R4, #0x00FFFFFF
 5c0:	13e044ff 	mvnne	r4, #-16777216	; 0xff000000
	ANDNE R3, R3, R4
 5c4:	10033004 	andne	r3, r3, r4
	ORRNE R3, R3, R2, LSL #16
 5c8:	11833802 	orrne	r3, r3, r2, lsl #16
	STR R3,  [R1]
 5cc:	e5813000 	str	r3, [r1]
	
	LDR R1, =ADDR2
 5d0:	e59f1034 	ldr	r1, [pc, #52]	; 60c <DONE+0x8>
	LDR R3, [R1]	// current LED display 2
 5d4:	e5913000 	ldr	r3, [r1]
//	MOV R3, #0
	TST R0, #16
 5d8:	e3100010 	tst	r0, #16
	MOVNE R4, #0xFFFFFF00
 5dc:	13e040ff 	mvnne	r4, #255	; 0xff
	ANDNE R3, R3, R4
 5e0:	10033004 	andne	r3, r3, r4
	ORRNE R3, R3, R2
 5e4:	11833002 	orrne	r3, r3, r2
	TST R0, #32
 5e8:	e3100020 	tst	r0, #32
	MOVNE R4, #0xFFFF00FF
 5ec:	13e04cff 	mvnne	r4, #65280	; 0xff00
	ANDNE R3, R3, R4
 5f0:	10033004 	andne	r3, r3, r4
	ORRNE R3, R3, R2, LSL #8
 5f4:	11833402 	orrne	r3, r3, r2, lsl #8
	STR R3, [R1]
 5f8:	e5813000 	str	r3, [r1]
	
	POP {R4}
 5fc:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
	B DONE
 600:	eaffffff 	b	604 <DONE>

00000604 <DONE>:

DONE:
	BX LR
 604:	e12fff1e 	bx	lr
	.global HEX_clear_ASM
	.global HEX_flood_ASM
	.global HEX_write_ASM

HEX_flood_ASM: 
	LDR R1, =ADDR1
 608:	ff200020 	.word	0xff200020
	ORRNE R3, R3, R2, LSL #16
	TST R0, #8
	ORRNE R3, R3, R2, LSL #24
	STR R3, [R1]	

	LDR R1, =ADDR2
 60c:	ff200030 	.word	0xff200030

00000610 <read_PB_data_ASM>:
	.global PB_clear_edgecap_ASM
	.global enable_PB_INT_ASM
	.global disable_PB_INT_ASM	

read_PB_data_ASM:
	LDR R0, =PB_ADDR
 610:	e59f00ac 	ldr	r0, [pc, #172]	; 6c4 <DONE+0x4>
	LDR R0, [R0]
 614:	e5900000 	ldr	r0, [r0]
	AND R0, R0, #0b1111
 618:	e200000f 	and	r0, r0, #15
	
	B DONE
 61c:	ea000027 	b	6c0 <DONE>

00000620 <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:	// return int containing the one-hot encoding of the pressed buttons
	LDR R1, =0xFF200050	// LOAD PB ADDRESS INTO REGISTER
 620:	e59f109c 	ldr	r1, [pc, #156]	; 6c4 <DONE+0x4>
	LDR R1, [R1]		// READ PUSHBUTTONS
 624:	e5911000 	ldr	r1, [r1]
	AND R1, R1, #0b1111	// CLEAR UNUSED BITS
 628:	e201100f 	and	r1, r1, #15
	
	AND R0, R0, #0b1111
 62c:	e200000f 	and	r0, r0, #15
	AND R1, R1, R0		// polled PB will be 1 and if PB is pressed they will also be 1. AND will return 1 if both are 1.
 630:	e0011000 	and	r1, r1, r0
	CMP R1, #0
 634:	e3510000 	cmp	r1, #0
	MOVNE R0, #0
 638:	13a00000 	movne	r0, #0
	MOVEQ R0, #1
 63c:	03a00001 	moveq	r0, #1
	
	B DONE
 640:	ea00001e 	b	6c0 <DONE>

00000644 <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:
	LDR R0, =EC_ADDR	// load edgecapture register address into register
 644:	e59f007c 	ldr	r0, [pc, #124]	; 6c8 <DONE+0x8>
	LDR R0, [R0]		// load edgecapture register data
 648:	e5900000 	ldr	r0, [r0]
	AND R0, R0, #0b1111	// clear unwanted bits
 64c:	e200000f 	and	r0, r0, #15
	
	B DONE
 650:	ea00001a 	b	6c0 <DONE>

00000654 <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:
	LDR R1, =EC_ADDR	// load address into register
 654:	e59f106c 	ldr	r1, [pc, #108]	; 6c8 <DONE+0x8>
	LDR R1, [R1]		// load edge capture register data
 658:	e5911000 	ldr	r1, [r1]
	AND R1, R1, #0b1111	// clear any unwanted bits
 65c:	e201100f 	and	r1, r1, #15
	AND R1, R1, R0		// AND operation with polled PBs and edgecapture register to determine the desired edgecapture bits
 660:	e0011000 	and	r1, r1, r0
	CMP R1, #0		
 664:	e3510000 	cmp	r1, #0
	MOVNE R0, #0		// return true (1) if button pressed
 668:	13a00000 	movne	r0, #0
	MOVEQ R0, #1		// return false (0) if button not pressed
 66c:	03a00001 	moveq	r0, #1

	B DONE
 670:	ea000012 	b	6c0 <DONE>

00000674 <PB_clear_edgecap_ASM>:

PB_clear_edgecap_ASM:
	LDR R1, =EC_ADDR
 674:	e59f104c 	ldr	r1, [pc, #76]	; 6c8 <DONE+0x8>
	LDR R2, [R1]
 678:	e5912000 	ldr	r2, [r1]
	// writing to the edgecapture register would clear all edgecapture register values
	BIC R2, R2, R0
 67c:	e1c22000 	bic	r2, r2, r0
	STR R2, [R1]
 680:	e5812000 	str	r2, [r1]

	B DONE
 684:	ea00000d 	b	6c0 <DONE>

00000688 <enable_PB_INT_ASM>:

enable_PB_INT_ASM:
	LDR R1, =INTR_ADDR	// load the interrupt address
 688:	e59f103c 	ldr	r1, [pc, #60]	; 6cc <DONE+0xc>
	LDR R2, [R1]		// load the interrupt register value
 68c:	e5912000 	ldr	r2, [r1]
	AND R2, R2, #0b1111	// clear unwanted bits
 690:	e202200f 	and	r2, r2, #15
	AND R0, R0, #0b1111	
 694:	e200000f 	and	r0, r0, #15
	ORR R2, R2, R0		// change the bit of desired PBs from 0 to 1 in interrupt register
 698:	e1822000 	orr	r2, r2, r0
	STR R2, [R1]		// write to interrupt register
 69c:	e5812000 	str	r2, [r1]
	
	B DONE
 6a0:	ea000006 	b	6c0 <DONE>

000006a4 <disable_PB_INT_ASM>:

disable_PB_INT_ASM:
	LDR R1, =INTR_ADDR	// load the interrupt address
 6a4:	e59f1020 	ldr	r1, [pc, #32]	; 6cc <DONE+0xc>
	LDR R2, [R1]		// load the interrupt register value
 6a8:	e5912000 	ldr	r2, [r1]
	AND R0, R0, #0b1111	// clear any wanted bits
 6ac:	e200000f 	and	r0, r0, #15
	AND R2, R2, #0b1111
 6b0:	e202200f 	and	r2, r2, #15
	BIC R2, R2, R0		// the bits to clear are labelled as "1" in R0		
 6b4:	e1c22000 	bic	r2, r2, r0
	STR R2, [R1]		// write to interrupt register
 6b8:	e5812000 	str	r2, [r1]

	B DONE
 6bc:	eaffffff 	b	6c0 <DONE>

000006c0 <DONE>:

DONE:	
	BX LR
 6c0:	e12fff1e 	bx	lr
	.global PB_clear_edgecap_ASM
	.global enable_PB_INT_ASM
	.global disable_PB_INT_ASM	

read_PB_data_ASM:
	LDR R0, =PB_ADDR
 6c4:	ff200050 	.word	0xff200050
	MOVEQ R0, #1
	
	B DONE

read_PB_edgecap_ASM:
	LDR R0, =EC_ADDR	// load edgecapture register address into register
 6c8:	ff20005c 	.word	0xff20005c
	STR R2, [R1]

	B DONE

enable_PB_INT_ASM:
	LDR R1, =INTR_ADDR	// load the interrupt address
 6cc:	ff200058 	.word	0xff200058

000006d0 <HPS_TIM_config_ASM>:
	.global HPS_TIM_read_INT_ASM
	.global HPS_TIM_clear_INT_ASM


HPS_TIM_config_ASM:
			PUSH {R4-R6}				// save states (convention)
 6d0:	e92d0070 	push	{r4, r5, r6}
			LDR R1, [R0]				//LOAD TIM FROM STRUCT POINTER
 6d4:	e5901000 	ldr	r1, [r0]
			AND R1, R1, #0b1111		//USE ONLY THE LOWEST 4 BITS
 6d8:	e201100f 	and	r1, r1, #15
			MOV R2, #0					//COUNTER		
 6dc:	e3a02000 	mov	r2, #0
			B HPS_TIM_config_ASM_LOOP
 6e0:	eaffffff 	b	6e4 <HPS_TIM_config_ASM_LOOP>

000006e4 <HPS_TIM_config_ASM_LOOP>:

HPS_TIM_config_ASM_LOOP:

			CMP R2, #4					//LOOP FOUR TIME
 6e4:	e3520004 	cmp	r2, #4
			POPGE {R4-R6}
 6e8:	a8bd0070 	popge	{r4, r5, r6}
			BGE DONE					//DONE
 6ec:	aa00004e 	bge	82c <DONE>
			AND R3, R1, #1				//CHECK THE LOWEST BITS FROM ROTATED TIM
 6f0:	e2013001 	and	r3, r1, #1
			CMP R3, #0					//CHECK IF THE CURRENT LOWEST BIT IS ZERO
 6f4:	e3530000 	cmp	r3, #0
			ASR R1, R1, #1				//SHIFT TIM BY 1
 6f8:	e1a010c1 	asr	r1, r1, #1
			ADDEQ R2, R2, #1			//INCREASE CONTER
 6fc:	02822001 	addeq	r2, r2, #1
			BEQ HPS_TIM_config_ASM_LOOP	//IF CURRENT LOWEST BIT IS 0, START LOOP AGAIN FROM HERE
 700:	0afffff7 	beq	6e4 <HPS_TIM_config_ASM_LOOP>
	

			//DETERMINE WHICH BIT IS 1 BY CHECKING THE CURRENT COUNTER
			CMP R2, #0					//BIT 0 IS 1
 704:	e3520000 	cmp	r2, #0
			LDREQ R4, =TIMER0			//LOAD ADDRESS OF THE TIMER0
 708:	059f4120 	ldreq	r4, [pc, #288]	; 830 <DONE+0x4>
			CMP R2, #1					//BIT 1 IS 1
 70c:	e3520001 	cmp	r2, #1
			LDREQ R4, =TIMER1			//LOAD ADDRESS OF THE TIMER1
 710:	059f411c 	ldreq	r4, [pc, #284]	; 834 <DONE+0x8>
			CMP R2, #2					//BIT 2 IS 1
 714:	e3520002 	cmp	r2, #2
			LDREQ R4, =TIMER2			//LOAD ADDRESS OF THE TIMER2
 718:	059f4118 	ldreq	r4, [pc, #280]	; 838 <DONE+0xc>
			CMP R2, #3					//BIT 3 IS 1
 71c:	e3520003 	cmp	r2, #3
			LDREQ R4, =TIMER3			//LOAD ADDRESS OF THE TIMER3
 720:	059f4114 	ldreq	r4, [pc, #276]	; 83c <DONE+0x10>
		

			//START CONFIGURATION
			LDR R5, [R4, #0x8]			//SET ENABLE TO 0 WHILE KEEP OTHER BIT UNCHANGED
 724:	e5945008 	ldr	r5, [r4, #8]
			BIC R5, R5, #0b1			// enable is the LSB in this case			
 728:	e3c55001 	bic	r5, r5, #1
			STR R5, [R4, #0x8] 			
 72c:	e5845008 	str	r5, [r4, #8]
			
			// for the first 2 timers, they have clock rate 100 MHz
			// for the 3rd and 4th timers, they have clock rate 25 MHz
			// timeout expressed in us, so 1us would mean 100 clock cycles
			LDR R5, [R0, #0x4]			//LOAD TIMEOUT from input
 730:	e5905004 	ldr	r5, [r0, #4]
			CMP R2, #2				// determine which timer is selected so appropriate timeout can be configured
 734:	e3520002 	cmp	r2, #2
			MOVLT R6, #100				// The 100MHz timers are selected
 738:	b3a06064 	movlt	r6, #100	; 0x64
			MOVGE R6, #25				// The 25MHz timers are selected
 73c:	a3a06019 	movge	r6, #25
			MUL R5, R5, R6				// scale the timeout to match the number of clock period
 740:	e0050695 	mul	r5, r5, r6
			STR R5, [R4] 				//SET TIMEOUT to register
 744:	e5845000 	str	r5, [r4]

			LDR R5, [R0, #0x8]			//LOAD "LD_en"
 748:	e5905008 	ldr	r5, [r0, #8]
			AND R5, R5, #0b1			// clear unwanted bits
 74c:	e2055001 	and	r5, r5, #1
			LSL R5, R5, #1				//M: start counting down from timeout
 750:	e1a05085 	lsl	r5, r5, #1

			LDR R3, [R0, #0xC]			//LOAD "INT_en"
 754:	e590300c 	ldr	r3, [r0, #12]
			MVN R3, R3				// take complement since it is active-low
 758:	e1e03003 	mvn	r3, r3
			AND R3, R3, #0b1			// clear any unwanted bits (retain only the LSB)
 75c:	e2033001 	and	r3, r3, #1
			LSL R3, R3, #2				// move to correct bit location
 760:	e1a03103 	lsl	r3, r3, #2
			ORR R5, R3, R5				// combine with previous instruction so that the instruction can be written into control register together
 764:	e1835005 	orr	r5, r3, r5
			STR R5, [R4, #0x8]			// write into control register
 768:	e5845008 	str	r5, [r4, #8]

			LDR R3, [R0, #0x10]			//LOAD "enable"
 76c:	e5903010 	ldr	r3, [r0, #16]
			AND R3, R3, #0b1			// clear any unwanted bits
 770:	e2033001 	and	r3, r3, #1
			ORR R5, R5, R3				// add into previous instruction
 774:	e1855003 	orr	r5, r5, r3
			
			STR R5, [R4, #0x8]			//STORE INTO CONTROL REGISTER
 778:	e5845008 	str	r5, [r4, #8]

			ADD R2, R2, #1				//INCRESE COUNTER
 77c:	e2822001 	add	r2, r2, #1
			B HPS_TIM_config_ASM_LOOP
 780:	eaffffd7 	b	6e4 <HPS_TIM_config_ASM_LOOP>

00000784 <HPS_TIM_read_INT_ASM>:


HPS_TIM_read_INT_ASM:	// read only one timer 

			PUSH {R4-R5}				//PUSH 
 784:	e92d0030 	push	{r4, r5}
			CMP R0, #1
 788:	e3500001 	cmp	r0, #1
			LDREQ R1, =TIMER0			//LOAD ADDRESS OF THE TIMER0
 78c:	059f109c 	ldreq	r1, [pc, #156]	; 830 <DONE+0x4>
			CMP R0, #2
 790:	e3500002 	cmp	r0, #2
			LDREQ R1, =TIMER1			//LOAD ADDRESS OF THE TIMER0	
 794:	059f1098 	ldreq	r1, [pc, #152]	; 834 <DONE+0x8>
			CMP R0, #4
 798:	e3500004 	cmp	r0, #4
			LDREQ R1, =TIMER2			//LOAD ADDRESS OF THE TIMER0
 79c:	059f1094 	ldreq	r1, [pc, #148]	; 838 <DONE+0xc>
			CMP R0, #8
 7a0:	e3500008 	cmp	r0, #8
			LDREQ R1, =TIMER3			//LOAD ADDRESS OF THE TIMER0
 7a4:	059f1090 	ldreq	r1, [pc, #144]	; 83c <DONE+0x10>

			//READ FROM S
			LDR R2, [R1, #0x10]
 7a8:	e5912010 	ldr	r2, [r1, #16]
			AND R0, R2, #0b1
 7ac:	e2020001 	and	r0, r2, #1
			
			POP {R4-R5}
 7b0:	e8bd0030 	pop	{r4, r5}
			B DONE
 7b4:	ea00001c 	b	82c <DONE>

000007b8 <HPS_TIM_clear_INT_ASM>:


HPS_TIM_clear_INT_ASM:	// supports multiple timers
			
			PUSH {R4-R5}	// save states
 7b8:	e92d0030 	push	{r4, r5}
			LDR R1, [R0]				//LOAD TIM FROM STRUCT POINTER
 7bc:	e5901000 	ldr	r1, [r0]
			AND R1, R1, #0b1111		//USE ONLY THE LOWEST 4 BITS
 7c0:	e201100f 	and	r1, r1, #15
			MOV R2, #0					//COUNTER		
 7c4:	e3a02000 	mov	r2, #0
			B HPS_TIM_clear_ASM_LOOP
 7c8:	eaffffff 	b	7cc <HPS_TIM_clear_ASM_LOOP>

000007cc <HPS_TIM_clear_ASM_LOOP>:

HPS_TIM_clear_ASM_LOOP:
			CMP R2, #4					//LOOP FOUR TIME
 7cc:	e3520004 	cmp	r2, #4
			POPGE {R4-R5}
 7d0:	a8bd0030 	popge	{r4, r5}
			BGE DONE					//DONE
 7d4:	aa000014 	bge	82c <DONE>
			AND R3, R1, #1				//CHECK THE LOWEST BITS FROM ROTATED TIM
 7d8:	e2013001 	and	r3, r1, #1
			CMP R3, #0					//CHECK IF THE CURRENT LOWEST BIT IS ZERO
 7dc:	e3530000 	cmp	r3, #0
			ASR R1, R1, #1				//SHIFT TIM BY 1
 7e0:	e1a010c1 	asr	r1, r1, #1
			ADDEQ R2, R2, #1			//INCREASE CONTER
 7e4:	02822001 	addeq	r2, r2, #1
			BEQ HPS_TIM_clear_ASM_LOOP	//IF CURRENT LOWEST BIT IS 0, START LOOP AGAIN FROM HERE
 7e8:	0afffff7 	beq	7cc <HPS_TIM_clear_ASM_LOOP>
	

			//DETERMINE WHICH BIT IS 1 BY CHECKING THE CURRENT COUNTER
			CMP R2, #0					//BIT 0 IS 1
 7ec:	e3520000 	cmp	r2, #0
			LDREQ R4, =TIMER0			//LOAD ADDRESS OF THE TIMER0
 7f0:	059f4038 	ldreq	r4, [pc, #56]	; 830 <DONE+0x4>
			CMP R2, #1					//BIT 1 IS 1
 7f4:	e3520001 	cmp	r2, #1
			LDREQ R4, =TIMER1			//LOAD ADDRESS OF THE TIMER1
 7f8:	059f4034 	ldreq	r4, [pc, #52]	; 834 <DONE+0x8>
			CMP R2, #2					//BIT 2 IS 1
 7fc:	e3520002 	cmp	r2, #2
			LDREQ R4, =TIMER2			//LOAD ADDRESS OF THE TIMER2
 800:	059f4030 	ldreq	r4, [pc, #48]	; 838 <DONE+0xc>
			CMP R2, #3					//BIT 3 IS 1
 804:	e3520003 	cmp	r2, #3
			LDREQ R4, =TIMER3			//LOAD ADDRESS OF THE TIMER3
 808:	059f402c 	ldreq	r4, [pc, #44]	; 83c <DONE+0x10>
		

			//START CONFIGURATION
			LDR R5, [R4, #0x8]			//SET INT TO 0 WHILE KEEP OTHER BIT UNCHANGED
 80c:	e5945008 	ldr	r5, [r4, #8]
			BIC R5, R5, #0b0100			// enable is the LSB in this case			
 810:	e3c55004 	bic	r5, r5, #4
			STR R5, [R4, #0x8] 			
 814:	e5845008 	str	r5, [r4, #8]
			
			MOV R5, #0
 818:	e3a05000 	mov	r5, #0
			STR R5, [R4, #0xC]			// set F bit to 0
 81c:	e584500c 	str	r5, [r4, #12]
			STR R5, [R4, #0x10]			// set S bit to 0			
 820:	e5845010 	str	r5, [r4, #16]

			ADD R2, R2, #1				//INCRESE COUNTER
 824:	e2822001 	add	r2, r2, #1
			B HPS_TIM_clear_ASM_LOOP
 828:	eaffffe7 	b	7cc <HPS_TIM_clear_ASM_LOOP>

0000082c <DONE>:


DONE:
	BX LR
 82c:	e12fff1e 	bx	lr
			BEQ HPS_TIM_config_ASM_LOOP	//IF CURRENT LOWEST BIT IS 0, START LOOP AGAIN FROM HERE
	

			//DETERMINE WHICH BIT IS 1 BY CHECKING THE CURRENT COUNTER
			CMP R2, #0					//BIT 0 IS 1
			LDREQ R4, =TIMER0			//LOAD ADDRESS OF THE TIMER0
 830:	ffc08000 	.word	0xffc08000
			CMP R2, #1					//BIT 1 IS 1
			LDREQ R4, =TIMER1			//LOAD ADDRESS OF THE TIMER1
 834:	ffc09000 	.word	0xffc09000
			CMP R2, #2					//BIT 2 IS 1
			LDREQ R4, =TIMER2			//LOAD ADDRESS OF THE TIMER2
 838:	ffd00000 	.word	0xffd00000
			CMP R2, #3					//BIT 3 IS 1
			LDREQ R4, =TIMER3			//LOAD ADDRESS OF THE TIMER3
 83c:	ffd01000 	.word	0xffd01000

00000840 <atexit>:
 840:	e1a01000 	mov	r1, r0
 844:	e3a00000 	mov	r0, #0
 848:	e92d4008 	push	{r3, lr}
 84c:	e1a02000 	mov	r2, r0
 850:	e1a03000 	mov	r3, r0
 854:	eb00000e 	bl	894 <__register_exitproc>
 858:	e8bd4008 	pop	{r3, lr}
 85c:	e12fff1e 	bx	lr

00000860 <exit>:
 860:	e92d4008 	push	{r3, lr}
 864:	e3a01000 	mov	r1, #0
 868:	e1a04000 	mov	r4, r0
 86c:	eb000045 	bl	988 <__call_exitprocs>
 870:	e59f3018 	ldr	r3, [pc, #24]	; 890 <exit+0x30>
 874:	e5930000 	ldr	r0, [r3]
 878:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 87c:	e3530000 	cmp	r3, #0
 880:	11a0e00f 	movne	lr, pc
 884:	112fff13 	bxne	r3
 888:	e1a00004 	mov	r0, r4
 88c:	eb0000c9 	bl	bb8 <_exit>
 890:	00000c78 	.word	0x00000c78

00000894 <__register_exitproc>:
 894:	e59fc0e4 	ldr	r12, [pc, #228]	; 980 <__register_exitproc+0xec>
 898:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 89c:	e59c4000 	ldr	r4, [r12]
 8a0:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 8a4:	e35c0000 	cmp	r12, #0
 8a8:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 8ac:	e59c5004 	ldr	r5, [r12, #4]
 8b0:	0584c148 	streq	r12, [r4, #328]	; 0x148
 8b4:	e355001f 	cmp	r5, #31
 8b8:	e24dd010 	sub	sp, sp, #16
 8bc:	e1a06000 	mov	r6, r0
 8c0:	da000015 	ble	91c <__register_exitproc+0x88>
 8c4:	e59f00b8 	ldr	r0, [pc, #184]	; 984 <__register_exitproc+0xf0>
 8c8:	e3500000 	cmp	r0, #0
 8cc:	1a000001 	bne	8d8 <__register_exitproc+0x44>
 8d0:	e3e00000 	mvn	r0, #0
 8d4:	ea000018 	b	93c <__register_exitproc+0xa8>
 8d8:	e3a00e19 	mov	r0, #400	; 0x190
 8dc:	e58d100c 	str	r1, [sp, #12]
 8e0:	e58d2008 	str	r2, [sp, #8]
 8e4:	e58d3004 	str	r3, [sp, #4]
 8e8:	e320f000 	nop	{0}
 8ec:	e250c000 	subs	r12, r0, #0
 8f0:	e59d100c 	ldr	r1, [sp, #12]
 8f4:	e59d2008 	ldr	r2, [sp, #8]
 8f8:	e59d3004 	ldr	r3, [sp, #4]
 8fc:	0afffff3 	beq	8d0 <__register_exitproc+0x3c>
 900:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 904:	e3a00000 	mov	r0, #0
 908:	e58c0004 	str	r0, [r12, #4]
 90c:	e58c5000 	str	r5, [r12]
 910:	e584c148 	str	r12, [r4, #328]	; 0x148
 914:	e58c0188 	str	r0, [r12, #392]	; 0x188
 918:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 91c:	e3560000 	cmp	r6, #0
 920:	e59c4004 	ldr	r4, [r12, #4]
 924:	1a000007 	bne	948 <__register_exitproc+0xb4>
 928:	e2843002 	add	r3, r4, #2
 92c:	e2844001 	add	r4, r4, #1
 930:	e78c1103 	str	r1, [r12, r3, lsl #2]
 934:	e58c4004 	str	r4, [r12, #4]
 938:	e3a00000 	mov	r0, #0
 93c:	e28dd010 	add	sp, sp, #16
 940:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 944:	e12fff1e 	bx	lr
 948:	e3a00001 	mov	r0, #1
 94c:	e1a00410 	lsl	r0, r0, r4
 950:	e08c8104 	add	r8, r12, r4, lsl #2
 954:	e3560002 	cmp	r6, #2
 958:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 95c:	e5883108 	str	r3, [r8, #264]	; 0x108
 960:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 964:	e1877000 	orr	r7, r7, r0
 968:	01830000 	orreq	r0, r3, r0
 96c:	e1a05008 	mov	r5, r8
 970:	e5882088 	str	r2, [r8, #136]	; 0x88
 974:	e58c7188 	str	r7, [r12, #392]	; 0x188
 978:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 97c:	eaffffe9 	b	928 <__register_exitproc+0x94>
 980:	00000c78 	.word	0x00000c78
 984:	00000000 	.word	0x00000000

00000988 <__call_exitprocs>:
 988:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 98c:	e59f3168 	ldr	r3, [pc, #360]	; afc <__call_exitprocs+0x174>
 990:	e5933000 	ldr	r3, [r3]
 994:	e24dd014 	sub	sp, sp, #20
 998:	e58d3004 	str	r3, [sp, #4]
 99c:	e2833f52 	add	r3, r3, #328	; 0x148
 9a0:	e58d0008 	str	r0, [sp, #8]
 9a4:	e58d300c 	str	r3, [sp, #12]
 9a8:	e1a07001 	mov	r7, r1
 9ac:	e3a08001 	mov	r8, #1
 9b0:	e59d3004 	ldr	r3, [sp, #4]
 9b4:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 9b8:	e3560000 	cmp	r6, #0
 9bc:	e59db00c 	ldr	r11, [sp, #12]
 9c0:	0a000033 	beq	a94 <__call_exitprocs+0x10c>
 9c4:	e5965004 	ldr	r5, [r6, #4]
 9c8:	e2554001 	subs	r4, r5, #1
 9cc:	5286a088 	addpl	r10, r6, #136	; 0x88
 9d0:	5285501f 	addpl	r5, r5, #31
 9d4:	508a5105 	addpl	r5, r10, r5, lsl #2
 9d8:	5a000007 	bpl	9fc <__call_exitprocs+0x74>
 9dc:	ea000029 	b	a88 <__call_exitprocs+0x100>
 9e0:	e5953000 	ldr	r3, [r5]
 9e4:	e1530007 	cmp	r3, r7
 9e8:	0a000005 	beq	a04 <__call_exitprocs+0x7c>
 9ec:	e2444001 	sub	r4, r4, #1
 9f0:	e3740001 	cmn	r4, #1
 9f4:	e2455004 	sub	r5, r5, #4
 9f8:	0a000022 	beq	a88 <__call_exitprocs+0x100>
 9fc:	e3570000 	cmp	r7, #0
 a00:	1afffff6 	bne	9e0 <__call_exitprocs+0x58>
 a04:	e5963004 	ldr	r3, [r6, #4]
 a08:	e06a2005 	rsb	r2, r10, r5
 a0c:	e2433001 	sub	r3, r3, #1
 a10:	e0862002 	add	r2, r6, r2
 a14:	e1530004 	cmp	r3, r4
 a18:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 a1c:	13a01000 	movne	r1, #0
 a20:	05864004 	streq	r4, [r6, #4]
 a24:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 a28:	e3530000 	cmp	r3, #0
 a2c:	0affffee 	beq	9ec <__call_exitprocs+0x64>
 a30:	e1a02418 	lsl	r2, r8, r4
 a34:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 a38:	e1120001 	tst	r2, r1
 a3c:	e5969004 	ldr	r9, [r6, #4]
 a40:	0a000016 	beq	aa0 <__call_exitprocs+0x118>
 a44:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 a48:	e1120001 	tst	r2, r1
 a4c:	1a000016 	bne	aac <__call_exitprocs+0x124>
 a50:	e59d0008 	ldr	r0, [sp, #8]
 a54:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 a58:	e1a0e00f 	mov	lr, pc
 a5c:	e12fff13 	bx	r3
 a60:	e5963004 	ldr	r3, [r6, #4]
 a64:	e1530009 	cmp	r3, r9
 a68:	1affffd0 	bne	9b0 <__call_exitprocs+0x28>
 a6c:	e59b3000 	ldr	r3, [r11]
 a70:	e1530006 	cmp	r3, r6
 a74:	1affffcd 	bne	9b0 <__call_exitprocs+0x28>
 a78:	e2444001 	sub	r4, r4, #1
 a7c:	e3740001 	cmn	r4, #1
 a80:	e2455004 	sub	r5, r5, #4
 a84:	1affffdc 	bne	9fc <__call_exitprocs+0x74>
 a88:	e59f1070 	ldr	r1, [pc, #112]	; b00 <__call_exitprocs+0x178>
 a8c:	e3510000 	cmp	r1, #0
 a90:	1a000009 	bne	abc <__call_exitprocs+0x134>
 a94:	e28dd014 	add	sp, sp, #20
 a98:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 a9c:	e12fff1e 	bx	lr
 aa0:	e1a0e00f 	mov	lr, pc
 aa4:	e12fff13 	bx	r3
 aa8:	eaffffec 	b	a60 <__call_exitprocs+0xd8>
 aac:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 ab0:	e1a0e00f 	mov	lr, pc
 ab4:	e12fff13 	bx	r3
 ab8:	eaffffe8 	b	a60 <__call_exitprocs+0xd8>
 abc:	e5963004 	ldr	r3, [r6, #4]
 ac0:	e3530000 	cmp	r3, #0
 ac4:	e5963000 	ldr	r3, [r6]
 ac8:	1a000008 	bne	af0 <__call_exitprocs+0x168>
 acc:	e3530000 	cmp	r3, #0
 ad0:	0a000006 	beq	af0 <__call_exitprocs+0x168>
 ad4:	e1a00006 	mov	r0, r6
 ad8:	e58b3000 	str	r3, [r11]
 adc:	e320f000 	nop	{0}
 ae0:	e59b6000 	ldr	r6, [r11]
 ae4:	e3560000 	cmp	r6, #0
 ae8:	1affffb5 	bne	9c4 <__call_exitprocs+0x3c>
 aec:	eaffffe8 	b	a94 <__call_exitprocs+0x10c>
 af0:	e1a0b006 	mov	r11, r6
 af4:	e1a06003 	mov	r6, r3
 af8:	eafffff9 	b	ae4 <__call_exitprocs+0x15c>
 afc:	00000c78 	.word	0x00000c78
 b00:	00000000 	.word	0x00000000

00000b04 <register_fini>:
 b04:	e92d4008 	push	{r3, lr}
 b08:	e59f3010 	ldr	r3, [pc, #16]	; b20 <register_fini+0x1c>
 b0c:	e3530000 	cmp	r3, #0
 b10:	159f000c 	ldrne	r0, [pc, #12]	; b24 <register_fini+0x20>
 b14:	1bffff49 	blne	840 <atexit>
 b18:	e8bd4008 	pop	{r3, lr}
 b1c:	e12fff1e 	bx	lr
 b20:	00000ca0 	.word	0x00000ca0
 b24:	00000b28 	.word	0x00000b28

00000b28 <__libc_fini_array>:
 b28:	e92d4038 	push	{r3, r4, r5, lr}
 b2c:	e59f5030 	ldr	r5, [pc, #48]	; b64 <__libc_fini_array+0x3c>
 b30:	e59f4030 	ldr	r4, [pc, #48]	; b68 <__libc_fini_array+0x40>
 b34:	e0654004 	rsb	r4, r5, r4
 b38:	e1b04144 	asrs	r4, r4, #2
 b3c:	10855104 	addne	r5, r5, r4, lsl #2
 b40:	0a000004 	beq	b58 <__libc_fini_array+0x30>
 b44:	e5353004 	ldr	r3, [r5, #-4]!
 b48:	e1a0e00f 	mov	lr, pc
 b4c:	e12fff13 	bx	r3
 b50:	e2544001 	subs	r4, r4, #1
 b54:	1afffffa 	bne	b44 <__libc_fini_array+0x1c>
 b58:	eb000050 	bl	ca0 <__libc_fini>
 b5c:	e8bd4038 	pop	{r3, r4, r5, lr}
 b60:	e12fff1e 	bx	lr
 b64:	00000cb8 	.word	0x00000cb8
 b68:	00000cbc 	.word	0x00000cbc

00000b6c <__cs3_premain>:
 b6c:	e92d4008 	push	{r3, lr}
 b70:	eb00001d 	bl	bec <__libc_init_array>
 b74:	e59f3030 	ldr	r3, [pc, #48]	; bac <__cs3_premain+0x40>
 b78:	e3530000 	cmp	r3, #0
 b7c:	15930000 	ldrne	r0, [r3]
 b80:	01a00003 	moveq	r0, r3
 b84:	e59f3024 	ldr	r3, [pc, #36]	; bb0 <__cs3_premain+0x44>
 b88:	e3530000 	cmp	r3, #0
 b8c:	15931000 	ldrne	r1, [r3]
 b90:	01a01003 	moveq	r1, r3
 b94:	e3a02000 	mov	r2, #0
 b98:	ebfffdaf 	bl	25c <main>
 b9c:	e59f3010 	ldr	r3, [pc, #16]	; bb4 <__cs3_premain+0x48>
 ba0:	e3530000 	cmp	r3, #0
 ba4:	1bffff2d 	blne	860 <exit>
 ba8:	eafffffe 	b	ba8 <__cs3_premain+0x3c>
	...
 bb4:	00000860 	.word	0x00000860

00000bb8 <_exit>:
 bb8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 bbc:	e3a00018 	mov	r0, #24
 bc0:	e59f1004 	ldr	r1, [pc, #4]	; bcc <_exit+0x14>
 bc4:	ef123456 	svc	0x00123456
 bc8:	eafffffe 	b	bc8 <_exit+0x10>
 bcc:	00020026 	.word	0x00020026

00000bd0 <__cs3_isr_interrupt>:
 bd0:	eafffffe 	b	bd0 <__cs3_isr_interrupt>

00000bd4 <__cs3_isr_undef>:
 bd4:	eafffffe 	b	bd4 <__cs3_isr_undef>

00000bd8 <__cs3_isr_swi>:
 bd8:	eafffffe 	b	bd8 <__cs3_isr_swi>

00000bdc <__cs3_isr_pabort>:
 bdc:	eafffffe 	b	bdc <__cs3_isr_pabort>

00000be0 <__cs3_isr_dabort>:
 be0:	eafffffe 	b	be0 <__cs3_isr_dabort>

00000be4 <__cs3_isr_irq>:
 be4:	eafffffe 	b	be4 <__cs3_isr_irq>

00000be8 <__cs3_isr_fiq>:
 be8:	eafffffe 	b	be8 <__cs3_isr_fiq>

00000bec <__libc_init_array>:
 bec:	e92d4070 	push	{r4, r5, r6, lr}
 bf0:	e59f506c 	ldr	r5, [pc, #108]	; c64 <__libc_init_array+0x78>
 bf4:	e59f606c 	ldr	r6, [pc, #108]	; c68 <__libc_init_array+0x7c>
 bf8:	e0656006 	rsb	r6, r5, r6
 bfc:	e1b06146 	asrs	r6, r6, #2
 c00:	12455004 	subne	r5, r5, #4
 c04:	13a04000 	movne	r4, #0
 c08:	0a000005 	beq	c24 <__libc_init_array+0x38>
 c0c:	e5b53004 	ldr	r3, [r5, #4]!
 c10:	e2844001 	add	r4, r4, #1
 c14:	e1a0e00f 	mov	lr, pc
 c18:	e12fff13 	bx	r3
 c1c:	e1560004 	cmp	r6, r4
 c20:	1afffff9 	bne	c0c <__libc_init_array+0x20>
 c24:	e59f5040 	ldr	r5, [pc, #64]	; c6c <__libc_init_array+0x80>
 c28:	e59f6040 	ldr	r6, [pc, #64]	; c70 <__libc_init_array+0x84>
 c2c:	e0656006 	rsb	r6, r5, r6
 c30:	eb000012 	bl	c80 <_init>
 c34:	e1b06146 	asrs	r6, r6, #2
 c38:	12455004 	subne	r5, r5, #4
 c3c:	13a04000 	movne	r4, #0
 c40:	0a000005 	beq	c5c <__libc_init_array+0x70>
 c44:	e5b53004 	ldr	r3, [r5, #4]!
 c48:	e2844001 	add	r4, r4, #1
 c4c:	e1a0e00f 	mov	lr, pc
 c50:	e12fff13 	bx	r3
 c54:	e1560004 	cmp	r6, r4
 c58:	1afffff9 	bne	c44 <__libc_init_array+0x58>
 c5c:	e8bd4070 	pop	{r4, r5, r6, lr}
 c60:	e12fff1e 	bx	lr
 c64:	00000c98 	.word	0x00000c98
 c68:	00000c98 	.word	0x00000c98
 c6c:	00000c98 	.word	0x00000c98
 c70:	00000ca0 	.word	0x00000ca0

Disassembly of section .rodata:

00000c78 <_global_impure_ptr>:
 c78:	00000ce0 00000043                       ....C...

00000c80 <_init>:
 c80:	e1a0c00d 	mov	r12, sp
 c84:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 c88:	e24cb004 	sub	r11, r12, #4
 c8c:	e24bd028 	sub	sp, r11, #40	; 0x28
 c90:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 c94:	e12fff1e 	bx	lr

00000c98 <__init_array_start>:
 c98:	00000b04 	.word	0x00000b04

00000c9c <__frame_dummy_init_array_entry>:
 c9c:	00000208                                ....

00000ca0 <__libc_fini>:
 ca0:	e1a0c00d 	mov	r12, sp
 ca4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 ca8:	e24cb004 	sub	r11, r12, #4
 cac:	e24bd028 	sub	sp, r11, #40	; 0x28
 cb0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 cb4:	e12fff1e 	bx	lr

00000cb8 <__fini_array_start>:
 cb8:	000001c4 	.word	0x000001c4

00000cbc <__cs3_regions>:
 cbc:	00000000 	.word	0x00000000
 cc0:	00000040 	.word	0x00000040
 cc4:	00000040 	.word	0x00000040
 cc8:	000010d0 	.word	0x000010d0
 ccc:	00000020 	.word	0x00000020
