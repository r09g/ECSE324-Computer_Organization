
C:/ECSE324-Computer_Organization/G64_Lab1/rangecal.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
 			
			.text
			.global _start

_start:
			LDR R0, =RESULT				// R0 holds the address of RESULT
   0:	e59f006c 	ldr	r0, [pc, #108]	; 74 <NUMBERS+0x14>
			LDR R1, [R0, #4]			// R1 holds the number of entries in the list
   4:	e5901004 	ldr	r1, [r0, #4]
			ADD R2, R0, #8				// R2 holds the address of the first number in the list
   8:	e2802008 	add	r2, r0, #8
										// since the contents of R0 is the address of RESULT
			LDR R3, [R2]				// R3 stores max
   c:	e5923000 	ldr	r3, [r2]
			LDR R4, [R2]				// used to store min
  10:	e5924000 	ldr	r4, [r2]

00000014 <LOOP>:

LOOP: 		SUBS R1, R1, #1				// number of entries is decremented
  14:	e2511001 	subs	r1, r1, #1
			BEQ DONE					// goto DONE if counter has reached 0
  18:	0a00000b 	beq	4c <DONE>
			ADD R2, R2, #4				// Update R2 (address of next number in list)
  1c:	e2822004 	add	r2, r2, #4
			LDR R5, [R2]				// load next number from memory address stored in R2 into R5
  20:	e5925000 	ldr	r5, [r2]
			CMP R5, R3					// compare maximum and next number
  24:	e1550003 	cmp	r5, r3
			BGE TAKEMAX					// if new number is greater than old number, record new max
  28:	aa000003 	bge	3c <TAKEMAX>
			B CMPMIN					// if not a max, go on to check if it is a min
  2c:	eaffffff 	b	30 <CMPMIN>

00000030 <CMPMIN>:

CMPMIN:		CMP R5, R4					// compare minimum with next number
  30:	e1550004 	cmp	r5, r4
			BLE TAKEMIN					// if not a new  minimum continue to LOOP
  34:	da000002 	ble	44 <TAKEMIN>
			B LOOP						// branch back to LOOP
  38:	eafffff5 	b	14 <LOOP>

0000003c <TAKEMAX>:

TAKEMAX:	MOV R3, R5					// record new max value
  3c:	e1a03005 	mov	r3, r5
			B CMPMIN					// continue to compare minimum
  40:	eafffffa 	b	30 <CMPMIN>

00000044 <TAKEMIN>:

TAKEMIN: 	MOV R4, R5					// record new min value
  44:	e1a04005 	mov	r4, r5
			B LOOP						// continue loop
  48:	eafffff1 	b	14 <LOOP>

0000004c <DONE>:

DONE: 		SUBS R3, R3, R4				// calculate difference between max and min and store in R3
  4c:	e0533004 	subs	r3, r3, r4
			STR R3, [R0]				// store calculated range in RESULT (whose addressed is stored as the content of R0)
  50:	e5803000 	str	r3, [r0]

00000054 <END>:

END: 		B END						// infinite loop!
  54:	eafffffe 	b	54 <END>

00000058 <RESULT>:
  58:	00000000 	.word	0x00000000

0000005c <N>:
  5c:	00000005 	.word	0x00000005

00000060 <NUMBERS>:
  60:	00000004 	.word	0x00000004
  64:	00000005 	.word	0x00000005
  68:	00000003 	.word	0x00000003
  6c:	00000006 	.word	0x00000006
  70:	00000009 	.word	0x00000009
  74:	00000058 	.word	0x00000058
